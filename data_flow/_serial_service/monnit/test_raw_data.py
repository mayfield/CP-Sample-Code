import unittest
import logging

from monnit.protocol import MonnitProtocol


raw_data = [
    # format is (index, host sends, usb answers)
    (0, b'\xc5\x07\x00\x21\x00\x22\x63\x3b\x0b\xb1',
     b'\xc5\x0c\x00\x23\xc8\x00\x00\x00\x03\x00\x15\x44\x00\x30\x10'),
    (1, b'\xc5\x07\x00\x21\x01\x3c\x63\x3b\x0b\x4f',
     b'\xc5\x0c\x00\x23\xc8\x00\x00\x00\x03\x00\x15\x44\x01\x30\xc3'),
    (2, b'\xc5\x06\x00\x22\xb4\x74\x01\x00\x57',
     b'\xc5\x0c\x00\x23\xc8\x00\x00\x00\x03\x00\x15\x44\x01\x30\xc3'),
    (3, b'\xc5\x06\x00\x22\xb5\x74\x01\x00\x2e',
     b'\xc5\x0c\x00\x23\xc8\x00\x00\x00\x03\x00\x15\x44\x01\x30\xc3'),
    (4, b'\xc5\x06\x00\x22\x02\x77\x01\x00\xf3',
     b'\xc5\x0c\x00\x23\xc8\x00\x00\x00\x03\x00\x15\x44\x01\x30\xc3'),
    (5, b'\xc5\x07\x00\x21\x01\x6e\x63\x3b\x0b\x1d',
     b'\xc5\x0c\x00\x23\xc8\x00\x00\x00\x03\x00\x15\x44\x01\x30\xc3'),
    (6, b'\xc5\x06\x00\x22\xb4\x74\x01\x00\x57',
     b'\xc5\x0c\x00\x23\xc8\x00\x00\x00\x03\x00\x15\x44\x01\x30\xc3'),
    (7, b'\xc5\x06\x00\x22\xb4\x74\x01\x00\x57',
     b'\xc5\x0c\x00\x23\xc8\x00\x00\x00\x03\x00\x15\x44\x01\x30\xc3'),
    (8, b'\xc5\x06\x00\x22\xb4\x74\x01\x00\x57',
     b'\xc5\x0c\x00\x23\xc8\x00\x00\x00\x03\x00\x15\x44\x01\x30\xc3'),
    (9, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x00\x85',
     b'\xc5\x0e\x00\x52\xc8\x00\x00\x00\xc8\x00\x00\x00\x02\x05\x00\x00\xa5'),
    (10, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x01\x12',
     b'\xc5\x0e\x00\x52\xc8\x00\x00\x00\xc8\x00\x00\x00\x02\x05\x00\x00\xa5'),
    (11, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x02\x3c',
     b'\xc5\x0e\x00\x52\xc8\x00\x00\x00\xc8\x00\x00\x00\x02\x05\x00\x00\xa5'),
    (12, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x03\xab',
     b'\xc5\x0e\x00\x52\xc8\x00\x00\x00\xc8\x00\x00\x00\x02\x05\x00\x00\xa5'),
    (13, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x04\x60',
     b'\xc5\x0e\x00\x52\xc8\x00\x00\x00\xc8\x00\x00\x00\x02\x05\x00\x00\xa5'),
    (14, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x05\xf7',
     b'\xc5\x0e\x00\x52\xc8\x00\x00\x00\xc8\x00\x00\x00\x02\x05\x00\x00\xa5'),
    (15, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x06\xd9',
     b'\xc5\x0e\x00\x52\xc8\x00\x00\x00\xc8\x00\x00\x00\x02\x05\x00\x00\xa5'),
    (16, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x07\x4e',
     b'\xc5\x0e\x00\x52\xc8\x00\x00\x00\xc8\x00\x00\x00\x02\x05\x00\x00\xa5'),
    (17, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x08\xd8',
     b'\xc5\x0e\x00\x52\xc8\x00\x00\x00\xc8\x00\x00\x00\x02\x05\x00\x00\xa5'),
    (18, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x09\x4f',
     b'\xc5\x0e\x00\x52\xc8\x00\x00\x00\xc8\x00\x00\x00\x02\x05\x00\x00\xa5'),
    (19, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0a\x61',
     b'\xc5\x0e\x00\x52\xc8\x00\x00\x00\xc8\x00\x00\x00\x02\x05\x00\x00\xa5'),
    (20, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0b\xf6',
     b'\xc5\x12\x02\x56\x02\x77\x01\x00\x00\x00\x00\x00\xd7\xd7\xa4\x02\x00\x22\xf2\xd8\xe7'),
    (21, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d',
     b'\xc5\x12\x00\x56\xb4\x74\x01\x00\x00\x00\x00\x00\xd1\xd1\xa1\x09\x00\x00\x01\x00\x58'),
    (22, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0d\xaa',
     b'\xc5\x12\x02\x56\xb4\x74\x01\x00\x00\x00\x00\x00\xd1\xd1\xa1\x09\x00\x02\x00\x00\x7b'),
    (23, b'\xc5\x06\x00\x22\xb4\x74\x01\x00\x57',
     b'\xc5\x0c\x00\x23\xc8\x00\x00\x00\x03\x00\x15\x44\x01\x30\xc3'),
    (24, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0e\x84',
     b'\xc5\x12\x00\x56\xb4\x74\x01\x00\x00\x00\x00\x00\xd2\xd2\xa1\x09\x00\x00\x01\x00\x1c'),
    (25, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0f\x13',
     b'\xc5\x12\x02\x56\xb4\x74\x01\x00\x00\x00\x00\x00\xcb\xcb\xa0\x09\x00\x02\x00\x00\xd0'),
    (26, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x10\x3f',
     b'\xc5\x11\x00\x56\xb5\x74\x01\x00\x00\x00\x00\x00\xc2\xc2\xa4\x03\x00\x00\x00\x49'),
    (27, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x11\xa8',
     b'\xc5\x0e\x00\x52\xc8\x00\x00\x00\xc8\x00\x00\x00\x02\x05\x00\x00\xa5'),
    (28, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x12\x86',
     b'\xc5\x0e\x00\x52\xc8\x00\x00\x00\xc8\x00\x00\x00\x02\x05\x00\x00\xa5'),
    (29, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x13\x11',
     b'\xc5\x0e\x00\x52\xc8\x00\x00\x00\xc8\x00\x00\x00\x02\x05\x00\x00\xa5'),
    (30, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x14\xda',
     b'\xc5\x0e\x00\x52\xc8\x00\x00\x00\xc8\x00\x00\x00\x02\x05\x00\x00\xa5'),
    (31, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x15\x4d',
     b'\xc5\x12\x00\x56\xb4\x74\x01\x00\x50\x63\x3b\x0b\xdd\xdd\xa1\x09\x00\x00\x01\x00\x32'),
    (32, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x16\x63',
     b'\xc5\x12\x02\x56\xb4\x74\x01\x00\x51\x63\x3b\x0b\xd0\xd0\x9f\x09\x00\x02\x00\x00\x59'),
    (33, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x17\xf4',
     b'\xc5\x12\x00\x56\xb4\x74\x01\x00\x52\x63\x3b\x0b\xc3\xc3\xa0\x09\x00\x00\x01\x00\x02'),
    (34, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x18\x62',
     b'\xc5\x12\x02\x56\xb4\x74\x01\x00\x54\x63\x3b\x0b\xc7\xc7\x9f\x09\x00\x02\x00\x00\x2b'),
    (35, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x19\xf5', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (36, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x1a\xdb', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (37, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x1b\x4c', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (38, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x1c\x87', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (39, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x1d\x10', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (40, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x1e\x3e', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (41, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x1f\xa9', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (42, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x20\x66', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (43, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x21\xf1', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (44, b'\xc5\x06\x00\x22\xb4\x74\x01\x00\x57',
     b'\xc5\x0c\x00\x23\xc8\x00\x00\x00\x03\x00\x15\x44\x01\x30\xc3'),
    (45, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x22\xdf', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (46, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x23\x48', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (47, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x24\x83', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (48, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x25\x14', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (49, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x26\x3a', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (50, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x27\xad', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (51, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x28\x3b', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (52, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x29\xac', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (53, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x2a\x82', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (54, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x2b\x15', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (55, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x2c\xde', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (56, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x2d\x49', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (57, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x2e\x67', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (58, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x2f\xf0', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (59, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x30\xdc', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (60, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x31\x4b', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (61, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x32\x65', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (62, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x33\xf2', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (63, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x34\x39', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (64, b'\xc5\x06\x00\x22\xb4\x74\x01\x00\x57',
     b'\xc5\x0c\x00\x23\xc8\x00\x00\x00\x03\x00\x15\x44\x01\x30\xc3'),
    (65, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x35\xae', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (66, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x36\x80', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (67, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x37\x17', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (68, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x38\x81', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (69, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x39\x16', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (70, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x3a\x38', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (71, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x3b\xaf', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (72, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x3c\x64', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (73, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x3d\xf3', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (74, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x3e\xdd', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (75, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x3f\x4a', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (76, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x40\xd4', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (77, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x41\x43', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (78, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x42\x6d', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (79, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x43\xfa', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (80, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x44\x31', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (81, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x45\xa6', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (82, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x46\x88', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (83, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x47\x1f', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (84, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x48\x89', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (85, b'\xc5\x06\x00\x22\xb4\x74\x01\x00\x57',
     b'\xc5\x0c\x00\x23\xc8\x00\x00\x00\x03\x00\x15\x44\x01\x30\xc3'),
    (86, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x49\x1e', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (87, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x4a\x30', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (88, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x4b\xa7', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (89, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x4c\x6c', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (90, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x4d\xfb', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (91, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x4e\xd5', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (92, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x4f\x42', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (93, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x50\x6e', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (94, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x51\xf9', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (95, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x52\xd7', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (96, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x53\x40', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (97, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x54\x8b', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (98, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x55\x1c', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (99, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x56\x32', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (100, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x57\xa5', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (101, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x58\x33', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (102, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x59\xa4', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (103, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x5a\x8a', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (104, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x5b\x1d', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (105, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x5c\xd6', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (106, b'\xc5\x06\x00\x22\xb4\x74\x01\x00\x57',
     b'\xc5\x0c\x00\x23\xc8\x00\x00\x00\x03\x00\x15\x44\x01\x30\xc3'),
    (107, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x5d\x41', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (108, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x5e\x6f', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (109, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x5f\xf8', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (110, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x60\x37', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (111, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x61\xa0', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (112, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x62\x8e', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (113, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x63\x19', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (114, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x64\xd2', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (115, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x65\x45', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (116, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x66\x6b', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (117, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x67\xfc', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (118, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x68\x6a', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (119, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x69\xfd', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (120, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x6a\xd3', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (121, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x6b\x44', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (122, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x6c\x8f', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (123, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x6d\x18', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (124, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x6e\x36', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (125, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x6f\xa1', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (126, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x70\x8d', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (127, b'\xc5\x06\x00\x22\xb4\x74\x01\x00\x57',
     b'\xc5\x0c\x00\x23\xc8\x00\x00\x00\x03\x00\x15\x44\x01\x30\xc3'),
    (128, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x71\x1a', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (129, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x72\x34', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (130, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x73\xa3', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (131, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x74\x68', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (132, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x75\xff', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (133, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x76\xd1', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (134, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x77\x46', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (135, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x78\xd0', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),

    (136, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\xFE\x2E', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
    (137, b'\xc5\x07\x00\x24\xc8\x00\x00\x00\xFF\xB9', b'\xc5\x07\x00\x24\xc8\x00\x00\x00\x0c\x3d'),
]


class TestRawData(unittest.TestCase):

    def test_format(self):

        obj = MonnitProtocol()

        for data in raw_data:
            # will be tuple like (136, b'\xc5\x07\x00\x24', b'\xc5\x07\x00\x24\xc8')

            # logging.debug("Test {0}".format(data))

            # test the first message - these all should NOT fail
            obj.parse_message(data[1])

            # test the second message - these all should NOT fail
            obj.parse_message(data[2])

    def test_state_machine(self):

        from common.format_bytes import format_bytes

        obj = MonnitProtocol()
        obj.set_gateway_address(200)
        obj.add_sensor_id(95412)
        obj.add_sensor_id(95413)
        obj.add_sensor_id(96002)

        obj.reset_state_machine()

        # 1st message: Update Message State, with state to 0/reset
        #  like: [010]C5 07 00 21 00 FB D4 53 0B 48 (since end is TIME, will vary!)
        result = obj.next_request()
        self.assertEqual(result[3], 0x21)
        self.assertEqual(result[4], 0x00)
        # parsed = obj.parse_message(result)
        # logging.debug("01 {0}".format(parsed))

        # 2nd message: Update Message State, with state to 1/active
        #   like: [010]C5 07 00 21 01 D8 D5 53 0B D0 (since end is TIME, will vary!)
        result = obj.next_request()
        self.assertEqual(result[3], 0x21)
        self.assertEqual(result[4], 0x01)

        # 3rd message: Register Wireless device # 95412
        #   like: [009]C5 06 00 22 B4 74 01 00 57 (is fixed per address)
        result = obj.next_request()
        expect = raw_data[2][1]
        self.assertEqual(result[3], 0x22)
        self.assertEqual(result, expect)

        # 4th message: Register Wireless device # 95413
        #   like: [009]C5 06 00 22 b5 74 01 00 2e (is fixed per address)
        result = obj.next_request()
        expect = raw_data[3][1]
        self.assertEqual(result[3], 0x22)
        self.assertEqual(result, expect)

        # 5th message: Register Wireless device # 96002
        #   like: [009]C5 06 00 22 02 77 01 00 f3 (is fixed per address)
        result = obj.next_request()
        expect = raw_data[4][1]
        self.assertEqual(result[3], 0x22)
        self.assertEqual(result, expect)

        # 6th message: REPEAT the Update Message State, with state to 1/active
        #   like: [010]C5 07 00 21 01 CC D8 53 0B 82 (since end is TIME, will vary!)
        result = obj.next_request()
        self.assertEqual(result[3], 0x21)
        self.assertEqual(result[4], 0x01)

        # 7th message: POLL - with index 0
        #   like: [010]c5 07 00 24 c8 00 00 00 00 85
        result = obj.next_request()
        expect = raw_data[9][1]
        self.assertEqual(result[3], 0x24)
        self.assertEqual(result, expect)

        # 8th message: POLL - with index 1
        result = obj.next_request()
        expect = raw_data[10][1]
        self.assertEqual(result[3], 0x24)
        self.assertEqual(result, expect)

        # 8th message: POLL - with index 2
        result = obj.next_request()
        expect = raw_data[11][1]
        self.assertEqual(result[3], 0x24)
        self.assertEqual(result, expect)

        obj._index = 253

        # force a roll-over, will be 0xFE
        result = obj.next_request()
        expect = raw_data[136][1]
        self.assertEqual(result[3], 0x24)
        self.assertEqual(result, expect)

        # force a roll-over, will be 0xFF
        result = obj.next_request()
        expect = raw_data[137][1]
        self.assertEqual(result[3], 0x24)
        self.assertEqual(result, expect)

        # force a roll-over, will be BACK to 0x00
        result = obj.next_request()
        expect = raw_data[9][1]
        self.assertEqual(result[3], 0x24)
        self.assertEqual(result, expect)

        print(format_bytes('see', result))

        # logging.debug("01 {0}".format(result))


if __name__ == '__main__':
    # logging.basicConfig(level=logging.INFO)
    logging.basicConfig(level=logging.DEBUG)
    unittest.main()
