import socket
import serial
import time
import binascii
import threading


# The target IP and TCP port of the router under test
ROUTER_IP = "192.168.0.208"
ROUTER_PORT = 7218

# the serial port name linked to Router's serial (pyserial style)
SERIAL_PORT = "COM5"

# set to 'CR', 'NL', 'CR/LF', or None (for ignore).
LINE_FEED = None
assert LINE_FEED in ('CR', 'NL', 'CR/LF', None)


REQ_DATA = [
    b"\x01\x03\x00\x00\x00\x01\x84\x0A",
    b"\x01\x03\x00\x01\x00\x01\xD5\xCA",
    b"\x01\x03\x00\x02\x00\x01\x25\xCA",
    b"\x01\x03\x00\x03\x00\x01\x74\x0A",
    b"\x01\x03\x00\x04\x00\x01\xC5\xCB",
    b"\x01\x03\x00\x05\x00\x01\x94\x0B",
    b"\x01\x03\x00\x06\x00\x01\x64\x0B",
    b"\x01\x03\x00\x07\x00\x01\x35\xCB",
    b"\x01\x03\x00\x08\x00\x01\x05\xC8",
    b"\x01\x03\x00\x09\x00\x01\x54\x08",
    b"\x01\x03\x00\x0A\x00\x01\xA4\x08",
    b"\x01\x03\x00\x0B\x00\x01\xF5\xC8",
    b"\x01\x03\x00\x0C\x00\x01\x44\x09",
    b"\x01\x03\x00\x0D\x00\x01\x15\xC9",
    b"\x01\x03\x00\x0E\x00\x01\xE5\xC9",
    b"\x01\x03\x00\x0F\x00\x01\xB4\x09",
    b"\x01\x03\x00\x10\x00\x01\x85\xCF",
    b"\x01\x03\x00\x11\x00\x01\xD4\x0F",
    b"\x01\x03\x00\x12\x00\x01\x24\x0F",
    b"\x01\x03\x00\x13\x00\x01\x75\xCF",
    b"\x01\x03\x00\x14\x00\x01\xC4\x0E",
    b"\x01\x03\x00\x15\x00\x01\x95\xCE",
    b"\x01\x03\x00\x16\x00\x01\x65\xCE",
    b"\x01\x03\x00\x17\x00\x01\x34\x0E",
    b"\x01\x03\x00\x18\x00\x01\x04\x0D",
    b"\x01\x03\x00\x19\x00\x01\x55\xCD",
    b"\x01\x03\x00\x1A\x00\x01\xA5\xCD",
    b"\x01\x03\x00\x1B\x00\x01\xF4\x0D",
    b"\x01\x03\x00\x1C\x00\x01\x45\xCC",
    b"\x01\x03\x00\x1D\x00\x01\x14\x0C",
    b"\x01\x03\x00\x1E\x00\x01\xE4\x0C",
    b"\x01\x03\x00\x1F\x00\x01\xB5\xCC",
]

RSP_DATA = [
    b"\x01\x03\x02\x00\x00\xB8\x44",
    b"\x01\x03\x02\x01\x01\x78\x14",
    b"\x01\x03\x02\x02\x02\x38\xE5",
    b"\x01\x03\x02\x03\x03\xF8\xB5",
    b"\x01\x03\x02\x04\x04\xBB\x47",
    b"\x01\x03\x02\x05\x05\x7B\x17",
    b"\x01\x03\x02\x06\x06\x3B\xE6",
    b"\x01\x03\x02\x07\x07\xFB\xB6",
    b"\x01\x03\x02\x08\x08\xBE\x42",
    b"\x01\x03\x02\x09\x09\x7E\x12",
    b"\x01\x03\x02\x0A\x0A\x3E\xE3",
    b"\x01\x03\x02\x0B\x0B\xFE\xB3",
    b"\x01\x03\x02\x0C\x0C\xBD\x41",
    b"\x01\x03\x02\x0D\x0D\x7D\x11",
    b"\x01\x03\x02\x0E\x0E\x3D\xE0",
    b"\x01\x03\x02\x0F\x0F\xFD\xB0",
    b"\x01\x03\x02\x10\x10\xB4\x48",
    b"\x01\x03\x02\x11\x11\x74\x18",
    b"\x01\x03\x02\x12\x12\x34\xE9",
    b"\x01\x03\x02\x13\x13\xF4\xB9",
    b"\x01\x03\x02\x14\x14\xB7\x4B",
    b"\x01\x03\x02\x15\x15\x77\x1B",
    b"\x01\x03\x02\x16\x16\x37\xEA",
    b"\x01\x03\x02\x17\x17\xF7\xBA",
    b"\x01\x03\x02\x18\x18\xB2\x4E",
    b"\x01\x03\x02\x19\x19\x72\x1E",
    b"\x01\x03\x02\x1A\x1A\x32\xEF",
    b"\x01\x03\x02\x1B\x1B\xF2\xBF",
    b"\x01\x03\x02\x1C\x1C\xB1\x4D",
    b"\x01\x03\x02\x1D\x1D\x71\x1D",
    b"\x01\x03\x02\x1E\x1E\x31\xEC",
    b"\x01\x03\x02\x1F\x1F\xF1\xBC",
]

MAPPED_DATA = {
    b"\x01\x03\x00\x00\x00\x01\x84\x0A": b"\x01\x03\x02\x00\x00\xB8\x44",
    b"\x01\x03\x00\x01\x00\x01\xD5\xCA": b"\x01\x03\x02\x01\x01\x78\x14",
    b"\x01\x03\x00\x02\x00\x01\x25\xCA": b"\x01\x03\x02\x02\x02\x38\xE5",
    b"\x01\x03\x00\x03\x00\x01\x74\x0A": b"\x01\x03\x02\x03\x03\xF8\xB5",
    b"\x01\x03\x00\x04\x00\x01\xC5\xCB": b"\x01\x03\x02\x04\x04\xBB\x47",
    b"\x01\x03\x00\x05\x00\x01\x94\x0B": b"\x01\x03\x02\x05\x05\x7B\x17",
    b"\x01\x03\x00\x06\x00\x01\x64\x0B": b"\x01\x03\x02\x06\x06\x3B\xE6",
    b"\x01\x03\x00\x07\x00\x01\x35\xCB": b"\x01\x03\x02\x07\x07\xFB\xB6",
    b"\x01\x03\x00\x08\x00\x01\x05\xC8": b"\x01\x03\x02\x08\x08\xBE\x42",
    b"\x01\x03\x00\x09\x00\x01\x54\x08": b"\x01\x03\x02\x09\x09\x7E\x12",
    b"\x01\x03\x00\x0A\x00\x01\xA4\x08": b"\x01\x03\x02\x0A\x0A\xA4\x08",
    b"\x01\x03\x00\x0B\x00\x01\xF5\xC8": b"\x01\x03\x02\x0B\x0B\xFE\xB3",
    b"\x01\x03\x00\x0C\x00\x01\x44\x09": b"\x01\x03\x02\x0C\x0C\xBD\x41",
    b"\x01\x03\x00\x0D\x00\x01\x15\xC9": b"\x01\x03\x02\x0D\x0D\x7D\x11",
    b"\x01\x03\x00\x0E\x00\x01\xE5\xC9": b"\x01\x03\x02\x0E\x0E\x3D\xE0",
    b"\x01\x03\x00\x0F\x00\x01\xB4\x09": b"\x01\x03\x02\x0F\x0F\xFD\xB0",
    b"\x01\x03\x00\x10\x00\x01\x85\xCF": b"\x01\x03\x02\x10\x10\xB4\x48",
    b"\x01\x03\x00\x11\x00\x01\xD4\x0F": b"\x01\x03\x02\x11\x11\x74\x18",
    b"\x01\x03\x00\x12\x00\x01\x24\x0F": b"\x01\x03\x02\x12\x12\x34\xE9",
    b"\x01\x03\x00\x13\x00\x01\x75\xCF": b"\x01\x03\x02\x13\x13\xF4\xB9",
    b"\x01\x03\x00\x14\x00\x01\xC4\x0E": b"\x01\x03\x02\x14\x14\xB7\x4B",
    b"\x01\x03\x00\x15\x00\x01\x95\xCE": b"\x01\x03\x02\x15\x15\x77\x1B",
    b"\x01\x03\x00\x16\x00\x01\x65\xCE": b"\x01\x03\x02\x16\x16\x37\xEA",
    b"\x01\x03\x00\x17\x00\x01\x34\x0E": b"\x01\x03\x02\x17\x17\xF7\xBA",
    b"\x01\x03\x00\x18\x00\x01\x04\x0D": b"\x01\x03\x02\x18\x18\xB2\x4E",
    b"\x01\x03\x00\x19\x00\x01\x55\xCD": b"\x01\x03\x02\x19\x19\x72\x1E",
    b"\x01\x03\x00\x1A\x00\x01\xA5\xCD": b"\x01\x03\x02\x1A\x1A\x32\xEF",
    b"\x01\x03\x00\x1B\x00\x01\xF4\x0D": b"\x01\x03\x02\x1B\x1B\xF2\xBF",
    b"\x01\x03\x00\x1C\x00\x01\x45\xCC": b"\x01\x03\x02\x1C\x1C\xB1\x4D",
    b"\x01\x03\x00\x1D\x00\x01\x14\x0C": b"\x01\x03\x02\x1D\x1D\x71\x1D",
    b"\x01\x03\x00\x1E\x00\x01\xE4\x0C": b"\x01\x03\x02\x1E\x1E\x31\xEC",
    b"\x01\x03\x00\x1F\x00\x01\xB5\xCC": b"\x01\x03\x02\x1F\x1F\xF1\xBC"
}


class SerClient(threading.Thread):

    def __init__(self, name):
        super().__init__()

        self.please_stop = threading.Event()
        self.please_stop.clear()
        self.name = name
        return

    def run(self):

        ser_han = serial.Serial(SERIAL_PORT, baudrate=9600, timeout=.25)

        while not self.please_stop.is_set():
            # the run loop

            request = ser_han.read(size=8)

            if not request or len(request) == 0:
                print("{0}:Nota".format(self.name))
                # ser_han.write(b"Yes?")

            else:
                print("{0}:see:{1}".format(self.name, binascii.hexlify(request)))

                # was okay, so send the reply
                if request in MAPPED_DATA:
                    reply = MAPPED_DATA[request]
                else:
                    reply = b"error!\r\n"

                ser_han.write(reply)

        ser_han.close()
        return


class NetClient(threading.Thread):

    def __init__(self, name):
        super().__init__()

        self.please_stop = threading.Event()
        self.please_stop.clear()
        self.net_han = None
        self.name = name
        return

    def run(self):

        self.net_han = socket.socket()
        self.net_han.connect((ROUTER_IP, ROUTER_PORT))
        self.net_han.settimeout(5.0)

        while not self.please_stop.is_set():
            # the run loop

            errors = 0
            # for x in range(0, 0x1F):
            for x in range(0, 4):
                errors += self.send_one(x)

            self.please_stop.set()

        self.net_han.close()
        return

    def send_one(self, offset: int):

        request = REQ_DATA[offset]
        self.net_han.send(request)
        print("")
        print("{0}:req:{1}".format(self.name, binascii.hexlify(request)))
        time.sleep(0.5)

        expect = MAPPED_DATA[request]

        try:
            response = self.net_han.recv(1024)
            print("{0}:rsp:{1}".format(self.name, binascii.hexlify(response)))
            if expect != response:
                print("  ERROR:{0}:expect:{1}".format(self.name, binascii.hexlify(expect)))
                return 1

        except socket.timeout:
            print("{0}:rsp:None".format(self.name))
            return 1

        return 0


if __name__ == '__main__':

    print("Start the Serial Thread")
    ser_client = SerClient('ser1')
    ser_client.start()

    time.sleep(1.0)

    print("Start the Network Thread #1")
    net1_client = NetClient('net1')
    net1_client.start()

    time.sleep(1.0)

    # print("Start the Network Thread #2")
    # net2_client = NetClient('net2')
    # net2_client.start()

    # time.sleep(20.0)
    # net_client.please_stop.set()
    net1_client.join()
    # net2_client.join()

    print("Stop the Threads")
    ser_client.please_stop.set()
    ser_client.join()
